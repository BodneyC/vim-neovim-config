!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/0de02b65/
$FZF_DEFAULT_OPTS	nvim/config/conf-plugin.vim	/^  let $FZF_DEFAULT_OPTS='--layout=reverse --margin=1,3'$/;"	v
0	nvim/coc-settings.json	/^        "-jar",$/;"	s	array:languageserver.groovy.args
0	nvim/coc-settings.json	/^        ".ccls",$/;"	s	array:languageserver.ccls.rootPatterns
0	nvim/coc-settings.json	/^        "^[^:]+:(\\\\d+):(\\\\d+):\\\\s+([^:]+):\\\\s+(.*)$",$/;"	s	array:diagnostic-languageserver.linters.shellcheck.formatPattern
0	nvim/coc-settings.json	/^      "args": ["--format=gcc", "-x", "-"],$/;"	s	array:diagnostic-languageserver.linters.shellcheck.args
0	nvim/coc-settings.json	/^      "args": ["--stdio"]$/;"	s	array:languageserver.dockerfile.args
0	nvim/coc-settings.json	/^      "filetypes": ["c", "cpp", "C", "objc", "objcpp"],$/;"	s	array:languageserver.ccls.filetypes
0	nvim/coc-settings.json	/^      "filetypes": ["dockerfile"],$/;"	s	array:languageserver.dockerfile.filetypes
0	nvim/coc-settings.json	/^      "filetypes": ["go"],$/;"	s	array:languageserver.golang.filetypes
0	nvim/coc-settings.json	/^      "filetypes": ["groovy"]$/;"	s	array:languageserver.groovy.filetypes
0	nvim/coc-settings.json	/^      "filetypes": ["kotlin", "kt"]$/;"	s	array:languageserver.kotlin.filetypes
0	nvim/coc-settings.json	/^    "git",$/;"	s	array:explorer.file.columns
0	nvim/coc-settings.json	/^    "javascript",$/;"	s	array:eslint.filetypes
1	nvim/coc-settings.json	/^        "compile_commands.json",$/;"	s	array:languageserver.ccls.rootPatterns
1	nvim/coc-settings.json	/^        "~\/.config\/nvim\/addit-lang-servers\/groovy-language-server-all.jar"$/;"	s	array:languageserver.groovy.args
1	nvim/coc-settings.json	/^        {$/;"	o	array:diagnostic-languageserver.linters.shellcheck.formatPattern
1	nvim/coc-settings.json	/^      "args": ["--format=gcc", "-x", "-"],$/;"	s	array:diagnostic-languageserver.linters.shellcheck.args
1	nvim/coc-settings.json	/^      "filetypes": ["c", "cpp", "C", "objc", "objcpp"],$/;"	s	array:languageserver.ccls.filetypes
1	nvim/coc-settings.json	/^      "filetypes": ["kotlin", "kt"]$/;"	s	array:languageserver.kotlin.filetypes
1	nvim/coc-settings.json	/^    "javascriptreact"$/;"	s	array:eslint.filetypes
1	nvim/coc-settings.json	/^    "selection",$/;"	s	array:explorer.file.columns
2	nvim/coc-settings.json	/^        ".vim\/",$/;"	s	array:languageserver.ccls.rootPatterns
2	nvim/coc-settings.json	/^      "args": ["--format=gcc", "-x", "-"],$/;"	s	array:diagnostic-languageserver.linters.shellcheck.args
2	nvim/coc-settings.json	/^      "filetypes": ["c", "cpp", "C", "objc", "objcpp"],$/;"	s	array:languageserver.ccls.filetypes
2	nvim/coc-settings.json	/^    "clip",$/;"	s	array:explorer.file.columns
3	nvim/coc-settings.json	/^        ".git\/",$/;"	s	array:languageserver.ccls.rootPatterns
3	nvim/coc-settings.json	/^      "filetypes": ["c", "cpp", "C", "objc", "objcpp"],$/;"	s	array:languageserver.ccls.filetypes
3	nvim/coc-settings.json	/^    "diagnosticError",$/;"	s	array:explorer.file.columns
4	nvim/coc-settings.json	/^        ".hg\/"$/;"	s	array:languageserver.ccls.rootPatterns
4	nvim/coc-settings.json	/^      "filetypes": ["c", "cpp", "C", "objc", "objcpp"],$/;"	s	array:languageserver.ccls.filetypes
4	nvim/coc-settings.json	/^    "indent",$/;"	s	array:explorer.file.columns
5	nvim/coc-settings.json	/^    "icon",$/;"	s	array:explorer.file.columns
6	nvim/coc-settings.json	/^    "filename",$/;"	s	array:explorer.file.columns
7	nvim/coc-settings.json	/^    "size",$/;"	s	array:explorer.file.columns
8	nvim/coc-settings.json	/^    "modified",$/;"	s	array:explorer.file.columns
9	nvim/coc-settings.json	/^    "readonly"$/;"	s	array:explorer.file.columns
<	nvim/config/remappings.vim	/^xnoremap <       <gv$/;"	m
<C-h>	nvim/config/remappings.vim	/^inoremap <C-h> <Esc><C-h>$/;"	m
<C-h>	nvim/config/remappings.vim	/^nnoremap <silent> <C-h> :call WinMove('h')<CR>$/;"	m
<C-j>	nvim/config/remappings.vim	/^inoremap <C-j> <Esc><C-j>$/;"	m
<C-j>	nvim/config/remappings.vim	/^nnoremap <silent> <C-j> :call WinMove('j')<CR>$/;"	m
<C-k>	nvim/config/remappings.vim	/^inoremap <C-k> <Esc><C-k>$/;"	m
<C-k>	nvim/config/remappings.vim	/^nnoremap <silent> <C-k> :call WinMove('k')<CR>$/;"	m
<C-l>	nvim/config/remappings.vim	/^inoremap <C-l> <Esc><C-l>$/;"	m
<C-l>	nvim/config/remappings.vim	/^nnoremap <silent> <C-l> :call WinMove('l')<CR>$/;"	m
<CR>	nvim/config/remappings.vim	/^inoremap <expr> <CR>    pumvisible() ? "\\<C-y>" : "\\<C-g>u\\<CR>"$/;"	m
<F10>	nvim/config/terminal.vim	/^inoremap <F10> <esc>:call ChooseTerm("term-split", 1)<CR>a$/;"	m
<F10>	nvim/config/terminal.vim	/^nnoremap <F10> :call ChooseTerm("term-split", 1)<CR>$/;"	m
<F1>	nvim/config/remappings.vim	/^nnoremap <F1> :help <C-r><C-w><CR>$/;"	m
<F2>	nvim/config/remappings.vim	/^nnoremap <F2> :s\/\/g<Left><Left>$/;"	m
<F3>	nvim/config/remappings.vim	/^nnoremap <F3> :%s\/\/g<Left><Left>$/;"	m
<F7>	nvim/config/remappings.vim	/^inoremap <F7> <esc>:set spell!<CR>a$/;"	m
<F7>	nvim/config/remappings.vim	/^nnoremap <F7> :set spell!<CR>$/;"	m
<Leader>R	nvim/config/remappings.vim	/^nnoremap <Leader>R :Ranger<CR>$/;"	m
<LocalLeader>%	nvim/ftplugin/vue.vim	/^nnoremap <buffer> <LocalLeader>% :call <SID>TagMatch1()<Cr>$/;"	m
<LocalLeader>%	nvim/ftplugin/vue.vim	/^vnoremap <buffer> <LocalLeader>% <Esc>:call <SID>VisualTag()<Cr>$/;"	m
<LocalLeader>.	nvim/ftplugin/vue.vim	/^    inoremap <buffer> <LocalLeader>. >$/;"	m
<LocalLeader>5	nvim/ftplugin/vue.vim	/^nnoremap <buffer> <LocalLeader>5 :call <SID>TagMatch1()<Cr>$/;"	m
<LocalLeader>5	nvim/ftplugin/vue.vim	/^vnoremap <buffer> <LocalLeader>5 <Esc>:call <SID>VisualTag()<Cr>$/;"	m
<LocalLeader><LocalLeader>	nvim/ftplugin/vue.vim	/^inoremap <buffer> <LocalLeader><LocalLeader> <Esc>:call <SID>EditFromJump()<Cr>$/;"	m
<LocalLeader><LocalLeader>	nvim/ftplugin/vue.vim	/^nnoremap <buffer> <LocalLeader><LocalLeader> :call <SID>EditFromJump()<Cr>$/;"	m
<LocalLeader>>	nvim/ftplugin/vue.vim	/^    inoremap <buffer> <LocalLeader>> >$/;"	m
<LocalLeader>c	nvim/ftplugin/vue.vim	/^    vmap <buffer> <LocalLeader>c <Plug>(XMLEditWrapComment)$/;"	m
<LocalLeader>d	nvim/ftplugin/vue.vim	/^nnoremap <buffer> <LocalLeader>d :call <SID>DeleteTag()<Cr>$/;"	m
<LocalLeader>u	nvim/ftplugin/vue.vim	/^    vmap <buffer> <LocalLeader>u <Plug>(XMLEditUnwrapComment)$/;"	m
<LocalLeader>w	nvim/ftplugin/vue.vim	/^nnoremap <buffer> <LocalLeader>w :call <SID>ClearJumpMarks()<Cr>$/;"	m
<LocalLeader>x	nvim/ftplugin/vue.vim	/^vnoremap <buffer> <LocalLeader>x "xx:call <SID>WrapTag(@x)<Cr>$/;"	m
<Plug>(XMLEditUnwrapComment)	nvim/ftplugin/vue.vim	/^vnoremap <buffer> <Plug>(XMLEditUnwrapComment) <Esc>:call <SID>DecreaseCommentLevel()<CR>$/;"	m
<Plug>(XMLEditWrapComment)	nvim/ftplugin/vue.vim	/^vnoremap <buffer> <Plug>(XMLEditWrapComment) <Esc>:call <SID>IncreaseCommentLevel()<CR>$/;"	m
<S-Tab>	nvim/config/remappings.vim	/^inoremap <expr> <S-Tab> pumvisible() ? "\\<C-p>" : "\\<S-Tab>"$/;"	m
<S-Tab>	nvim/config/remappings.vim	/^nnoremap <S-Tab>    :bp<CR>$/;"	m
<S-down>	nvim/config/remappings.vim	/^inoremap <S-down> <Esc>:m+<CR>$/;"	m
<S-down>	nvim/config/remappings.vim	/^nnoremap <S-down> :m+<CR>$/;"	m
<S-down>	nvim/config/remappings.vim	/^xnoremap <S-down> :m'>+<CR>gv=gv$/;"	m
<S-up>	nvim/config/remappings.vim	/^inoremap <S-up>   <Esc>:m-2<CR>$/;"	m
<S-up>	nvim/config/remappings.vim	/^nnoremap <S-up>   :m-2<CR>$/;"	m
<S-up>	nvim/config/remappings.vim	/^xnoremap <S-up>   :m-2<CR>gv=gv$/;"	m
<TAB>	nvim/config/coc.vim	/^inoremap <silent><expr> <TAB>$/;"	m
<Tab>	nvim/config/remappings.vim	/^inoremap <expr> <Tab>   pumvisible() ? "\\<C-n>" : "\\<Tab>"$/;"	m
<Tab>	nvim/config/remappings.vim	/^nnoremap <Tab>      :bn<CR>$/;"	m
<leader>"	nvim/config/remappings.vim	/^nnoremap <leader>" :sbn<CR>$/;"	m
<leader>%	nvim/config/remappings.vim	/^nnoremap <leader>% :vert sbn<CR>$/;"	m
<leader>*	nvim/config/remappings.vim	/^nnoremap <leader>* :%s\/\\<<C-r><C-w>\\>\/\/g<left><left>$/;"	m
<leader>/	nvim/config/remappings.vim	/^nnoremap <leader>\/ :noh<CR>$/;"	m
<leader>E	nvim/config/remappings.vim	/^nnoremap <leader>E :e!<CR>$/;"	m
<leader>F	nvim/config/remappings.vim	/^nmap <leader>F  <Plug>(coc-format)$/;"	m
<leader>F	nvim/config/remappings.vim	/^vmap <leader>F  <Plug>(coc-format-selected)$/;"	m
<leader>M	nvim/config/remappings.vim	/^nnoremap <leader>M :call FZFOpen(':Maps')<CR>$/;"	m
<leader>Q	nvim/config/remappings.vim	/^nnoremap <leader>Q :qa!<CR>$/;"	m
<leader>T	nvim/config/remappings.vim	/^nnoremap <leader>T :TagbarToggle<CR>$/;"	m
<leader>U	nvim/config/remappings.vim	/^nnoremap <leader>U :MundoToggle<CR>$/;"	m
<leader>V	nvim/config/remappings.vim	/^nnoremap <leader>V :Vista!!<CR>$/;"	m
<leader>W	nvim/config/remappings.vim	/^nnoremap <leader>W :wqa<CR>$/;"	m
<leader>b#	nvim/config/remappings.vim	/^nnoremap <leader>b# <C-^>$/;"	m
<leader>b1	nvim/config/remappings.vim	/^nnoremap <leader>b1 :b1<CR>$/;"	m
<leader>b2	nvim/config/remappings.vim	/^nnoremap <leader>b2 :b2<CR>$/;"	m
<leader>b3	nvim/config/remappings.vim	/^nnoremap <leader>b3 :b3<CR>$/;"	m
<leader>b4	nvim/config/remappings.vim	/^nnoremap <leader>b4 :b4<CR>$/;"	m
<leader>bD	nvim/config/remappings.vim	/^nnoremap <leader>bD :%bd\\|e#<CR>$/;"	m
<leader>bd	nvim/config/remappings.vim	/^nnoremap <leader>bd :bn<CR>:bd#<CR>$/;"	m
<leader>be	nvim/config/remappings.vim	/^nnoremap <leader>be :enew<CR>$/;"	m
<leader>bl	nvim/config/remappings.vim	/^nnoremap <leader>bl :call FZFOpen(':Buffer')<CR>$/;"	m
<leader>ce	nvim/config/remappings.vim	/^nnoremap <leader>ce :CocCommand explorer --toggle<CR>$/;"	m
<leader>d	nvim/config/remappings.vim	/^nnoremap <silent> <leader>d :CocList --auto-preview diagnostics<CR>$/;"	m
<leader>e	nvim/config/remappings.vim	/^nnoremap <leader>e :e<CR>$/;"	m
<leader>f	nvim/config/remappings.vim	/^nnoremap <leader>f :call FZFOpen(":call fzf#vim#files('', fzf#vim#with_preview({}, 'up:70%'))")</;"	m
<leader>gd	nvim/config/remappings.vim	/^nmap <silent> <leader>gd <Plug>(coc-definition)$/;"	m
<leader>ge	nvim/config/remappings.vim	/^nnoremap <leader>ge :call Goyo_e()<CR>$/;"	m
<leader>gi	nvim/config/remappings.vim	/^nmap <silent> <leader>gi <Plug>(coc-implementation)$/;"	m
<leader>gl	nvim/config/remappings.vim	/^nnoremap <leader>gl :call Goyo_l()<CR>$/;"	m
<leader>gr	nvim/config/remappings.vim	/^nmap <silent> <leader>gr <Plug>(coc-references)$/;"	m
<leader>gt	nvim/config/remappings.vim	/^nmap <silent> <leader>gt <Plug>(coc-type-definition)$/;"	m
<leader>i	nvim/config/remappings.vim	/^nnoremap <leader>i :IndentLinesToggle<CR>$/;"	m
<leader>l	nvim/config/remappings.vim	/^nnoremap <silent> <leader>l :CocList<CR>$/;"	m
<leader>m	nvim/config/remappings.vim	/^nnoremap <leader>m :call FZFOpen(':Marks')<CR>$/;"	m
<leader>of	nvim/config/remappings.vim	/^nnoremap <silent> <leader>of :e <cfile><CR>$/;"	m
<leader>ox	nvim/config/remappings.vim	/^nnoremap <silent> <leader>ox :call netrw#BrowseX(expand('<cfile>'),netrw#CheckIfRemote())<CR>$/;"	m
<leader>ox	nvim/config/remappings.vim	/^vnoremap <silent> <leader>ox :<C-u>call netrw#BrowseXVis()<CR>$/;"	m
<leader>q	nvim/config/remappings.vim	/^nnoremap <leader>q :q<CR>$/;"	m
<leader>r	nvim/config/remappings.vim	/^nnoremap <leader>r :call FZFOpen(':Rg')<CR>$/;"	m
<leader>s	nvim/config/remappings.vim	/^nnoremap <silent> <leader>s :CocList commands<CR>$/;"	m
<leader>t	nvim/config/remappings.vim	/^nnoremap <leader>t :call MakeTagsFile()<CR>$/;"	m
<leader>w	nvim/config/remappings.vim	/^nnoremap <leader>w :w<CR>$/;"	m
<s-tab>	nvim/config/remappings.vim	/^xnoremap <s-tab> <gv$/;"	m
<tab>	nvim/config/remappings.vim	/^xnoremap <tab>   >gv$/;"	m
>	nvim/config/remappings.vim	/^xnoremap >       >gv$/;"	m
>	nvim/ftplugin/vue.vim	/^    inoremap <buffer> > <Esc>:call <SID>InsertGt()<Cr>$/;"	m
Bclose	nvim/config/files.vim	/^command! -bang -complete=buffer -nargs=? Bclose Bdelete<bang> <args>$/;"	c
ChangeIndent	nvim/config/files.vim	/^command! -nargs=1 ChangeIndent call ChangeIndent(<f-args>)$/;"	c
ChangeIndent	nvim/config/files.vim	/^function! ChangeIndent(n)$/;"	f
ChooseTerm	nvim/config/terminal.vim	/^function! ChooseTerm(termname, slider)$/;"	f
CocFormat	nvim/config/remappings.vim	/^command! -nargs=0 -range -bar CocFormat call s:CocFormat(<range>, <line1>, <line2>)$/;"	c
ConvLineEndings	nvim/config/remappings.vim	/^command! -nargs=0 ConvLineEndings %s\/$/;"	c
FZFOpen	nvim/config/remappings.vim	/^function! FZFOpen(command_str)$/;"	f
FloatingFZF	nvim/config/remappings.vim	/^function! FloatingFZF()$/;"	f
Flogdiff	nvim/config/conf-plugin.vim	/^  function! Flogdiff()$/;"	f
GetHighlightTerm	nvim/config/files.vim	/^command! -nargs=+ GetHighlightTerm call GetHighlightTerm(<f-args>)$/;"	c
GetHighlightTerm	nvim/config/files.vim	/^function! GetHighlightTerm(group, ele)$/;"	f
Goyo_e	nvim/config/remappings.vim	/^function! Goyo_e() abort$/;"	f
Goyo_l	nvim/config/remappings.vim	/^function! Goyo_l() abort$/;"	f
IsCocEnabled	nvim/config/coc.vim	/^function! IsCocEnabled()$/;"	f
MakeTagsFile	nvim/config/remappings.vim	/^function! MakeTagsFile()$/;"	f
NvimGdbNoTKeymaps	nvim/config/conf-plugin.vim	/^  function! NvimGdbNoTKeymaps()$/;"	f
Q	nvim/config/remappings.vim	/^command! Q   q$/;"	c
Q	nvim/config/remappings.vim	/^nnoremap Q   q$/;"	m
Q!	nvim/config/remappings.vim	/^nnoremap Q!  q!$/;"	m
SessionLoad	.virkspace/session.vim	/^let SessionLoad = 1$/;"	v
SetIndent	nvim/config/files.vim	/^command! -nargs=1 SetIndent call SetIndent(<f-args>)$/;"	c
SetIndent	nvim/config/files.vim	/^function! SetIndent(n)$/;"	f
SetStartifyParams	nvim/config/conf-plugin.vim	/^  function! SetStartifyParams() abort$/;"	f
Vim and Neovim Configuration Files	README.md	/^Vim and Neovim Configuration Files$/;"	c
W	nvim/config/remappings.vim	/^command! W   w$/;"	c
WQ	nvim/config/remappings.vim	/^command! WQ  wq$/;"	c
WQa	nvim/config/remappings.vim	/^command! WQa wqa$/;"	c
WinMove	nvim/config/remappings.vim	/^function! WinMove(k)$/;"	f
Wq	nvim/config/remappings.vim	/^command! Wq  wq$/;"	c
Wqa	nvim/config/remappings.vim	/^command! Wqa wqa$/;"	c
[<Space>	nvim/config/remappings.vim	/^nnoremap [<Space> mzO<Esc>`z$/;"	m
[c	nvim/config/remappings.vim	/^nmap <silent> [c <Plug>(coc-diagnostic-prev)$/;"	m
\x1F	nvim/config/remappings.vim	/^map  <Plug>NERDCommenterToggle$/;"	m
]<Space>	nvim/config/remappings.vim	/^nnoremap ]<Space> mzo<Esc>`z$/;"	m
]c	nvim/config/remappings.vim	/^nmap <silent> ]c <Plug>(coc-diagnostic-next)$/;"	m
_msg_exit	softlink-config.sh	/^_msg_exit() { # msg[, ret_val]$/;"	f
_process	softlink-config.sh	/^_process() {$/;"	f
_yes_or_no	softlink-config.sh	/^_yes_or_no() { # msg$/;"	f
args	nvim/coc-settings.json	/^      "args": ["--format=gcc", "-x", "-"],$/;"	a	object:diagnostic-languageserver.linters.shellcheck
args	nvim/coc-settings.json	/^      "args": ["--stdio"]$/;"	a	object:languageserver.dockerfile
args	nvim/coc-settings.json	/^      "args": [$/;"	a	object:languageserver.groovy
b:last_wrap_atts_used	nvim/ftplugin/vue.vim	/^let b:last_wrap_atts_used = ""$/;"	v
b:last_wrap_tag_used	nvim/ftplugin/vue.vim	/^let b:last_wrap_tag_used = ""$/;"	v
cache	nvim/coc-settings.json	/^        "cache": {$/;"	o	object:languageserver.ccls.initializationOptions
ccls	nvim/coc-settings.json	/^    "ccls": {$/;"	o	object:languageserver
coc-calc	coc/extensions/package.json	/^    "coc-calc": ">=1.5.0",$/;"	s	object:dependencies
coc-css	coc/extensions/package.json	/^    "coc-css": "^1.2.2",$/;"	s	object:dependencies
coc-diagnostic	coc/extensions/package.json	/^    "coc-diagnostic": ">=0.0.13",$/;"	s	object:dependencies
coc-docker	coc/extensions/package.json	/^    "coc-docker": ">=0.2.1",$/;"	s	object:dependencies
coc-emmet	coc/extensions/package.json	/^    "coc-emmet": "^1.1.3",$/;"	s	object:dependencies
coc-eslint	coc/extensions/package.json	/^    "coc-eslint": ">=1.2.2",$/;"	s	object:dependencies
coc-explorer	coc/extensions/package.json	/^    "coc-explorer": ">=0.0.36"$/;"	s	object:dependencies
coc-git	coc/extensions/package.json	/^    "coc-git": ">=1.6.16",$/;"	s	object:dependencies
coc-go	coc/extensions/package.json	/^    "coc-go": ">=0.5.2",$/;"	s	object:dependencies
coc-html	coc/extensions/package.json	/^    "coc-html": "^1.2.1",$/;"	s	object:dependencies
coc-json	coc/extensions/package.json	/^    "coc-json": ">=1.2.3",$/;"	s	object:dependencies
coc-lists	coc/extensions/package.json	/^    "coc-lists": ">=1.3.4",$/;"	s	object:dependencies
coc-prettier	coc/extensions/package.json	/^    "coc-prettier": ">=1.1.8",$/;"	s	object:dependencies
coc-python	coc/extensions/package.json	/^    "coc-python": ">=1.2.5",$/;"	s	object:dependencies
coc-rls	coc/extensions/package.json	/^    "coc-rls": ">=1.1.2",$/;"	s	object:dependencies
coc-sh	coc/extensions/package.json	/^    "coc-sh": ">=0.2.1",$/;"	s	object:dependencies
coc-snippets	coc/extensions/package.json	/^    "coc-snippets": ">=2.1.13",$/;"	s	object:dependencies
coc-syntax	coc/extensions/package.json	/^    "coc-syntax": ">=1.2.4",$/;"	s	object:dependencies
coc-tabnine	coc/extensions/package.json	/^    "coc-tabnine": ">=1.2.1",$/;"	s	object:dependencies
coc-tslint-plugin	coc/extensions/package.json	/^    "coc-tslint-plugin": ">=1.1.1",$/;"	s	object:dependencies
coc-tsserver	coc/extensions/package.json	/^    "coc-tsserver": ">=1.4.2",$/;"	s	object:dependencies
coc-vetur	coc/extensions/package.json	/^    "coc-vetur": ">=1.1.6",$/;"	s	object:dependencies
coc-yank	coc/extensions/package.json	/^    "coc-yank": ">=1.1.2",$/;"	s	object:dependencies
coc.source.file.ignoreHidden	nvim/coc-settings.json	/^  "coc.source.file.ignoreHidden": false,$/;"	b
column	nvim/coc-settings.json	/^          "column": 2,$/;"	n	object:diagnostic-languageserver.linters.shellcheck.formatPattern.1
command	nvim/coc-settings.json	/^      "command": "\/home\/benjc\/.config\/nvim\/addit-lang-servers\/kotlin-language-server",$/;"	s	object:languageserver.kotlin
command	nvim/coc-settings.json	/^      "command": "ccls",$/;"	s	object:languageserver.ccls
command	nvim/coc-settings.json	/^      "command": "docker-langserver",$/;"	s	object:languageserver.dockerfile
command	nvim/coc-settings.json	/^      "command": "go-langserver",$/;"	s	object:languageserver.golang
command	nvim/coc-settings.json	/^      "command": "java",$/;"	s	object:languageserver.groovy
command	nvim/coc-settings.json	/^      "command": "shellcheck",$/;"	s	object:diagnostic-languageserver.linters.shellcheck
debounce	nvim/coc-settings.json	/^      "debounce": 100,$/;"	n	object:diagnostic-languageserver.linters.shellcheck
dependencies	coc/extensions/package.json	/^  "dependencies": {$/;"	o
diagnostic-languageserver.filetypes	nvim/coc-settings.json	/^  "diagnostic-languageserver.filetypes": {$/;"	o
diagnostic-languageserver.linters	nvim/coc-settings.json	/^  "diagnostic-languageserver.linters": {$/;"	o
diagnostic.virtualText	nvim/coc-settings.json	/^  "diagnostic.virtualText": false,$/;"	b
diagnostic.virtualTextPrefix	nvim/coc-settings.json	/^  "diagnostic.virtualTextPrefix": "| ",$/;"	s
diagnosticsEnabled	nvim/coc-settings.json	/^        "diagnosticsEnabled": true,$/;"	b	object:languageserver.golang.initializationOptions
die	nvim/addit-lang-servers/kotlin-language-server	/^die () {$/;"	f
directory	nvim/coc-settings.json	/^          "directory": "\/tmp\/ccls"$/;"	s	object:languageserver.ccls.initializationOptions.cache
dockerfile	nvim/coc-settings.json	/^    "dockerfile": {$/;"	o	object:languageserver
error	nvim/coc-settings.json	/^        "error": "error",$/;"	s	object:diagnostic-languageserver.linters.shellcheck.securities
eslint.autoFixOnSave	nvim/coc-settings.json	/^  "eslint.autoFixOnSave": true,$/;"	b
eslint.enable	nvim/coc-settings.json	/^  "eslint.enable": false,$/;"	b
eslint.filetypes	nvim/coc-settings.json	/^  "eslint.filetypes": [$/;"	a
explorer.file.column.git.icon.modified	nvim/coc-settings.json	/^  "explorer.file.column.git.icon.modified":""$/;"	s
explorer.file.column.git.showIgnored	nvim/coc-settings.json	/^  "explorer.file.column.git.showIgnored": true,$/;"	b
explorer.file.columns	nvim/coc-settings.json	/^  "explorer.file.columns": [$/;"	a
explorer.icon.enableNerdfont	nvim/coc-settings.json	/^  "explorer.icon.enableNerdfont": true,$/;"	b
filetypedetect	old/.vimrc	/^augroup filetypedetect$/;"	a
filetypes	nvim/coc-settings.json	/^      "filetypes": ["c", "cpp", "C", "objc", "objcpp"],$/;"	a	object:languageserver.ccls
filetypes	nvim/coc-settings.json	/^      "filetypes": ["dockerfile"],$/;"	a	object:languageserver.dockerfile
filetypes	nvim/coc-settings.json	/^      "filetypes": ["go"],$/;"	a	object:languageserver.golang
filetypes	nvim/coc-settings.json	/^      "filetypes": ["groovy"]$/;"	a	object:languageserver.groovy
filetypes	nvim/coc-settings.json	/^      "filetypes": ["kotlin", "kt"]$/;"	a	object:languageserver.kotlin
flog	nvim/config/conf-plugin.vim	/^  augroup flog$/;"	a
formatLines	nvim/coc-settings.json	/^      "formatLines": 1,$/;"	n	object:diagnostic-languageserver.linters.shellcheck
formatPattern	nvim/coc-settings.json	/^      "formatPattern": [$/;"	a	object:diagnostic-languageserver.linters.shellcheck
g:AutoPairsFlyMode	nvim/config/interface.vim	/^let g:AutoPairsFlyMode=0$/;"	v
g:AutoPairsFlyMode	old/.vimrc	/^let g:AutoPairsFlyMode=0$/;"	v
g:AutoPairsMultilineClose	nvim/config/interface.vim	/^let g:AutoPairsMultilineClose=0$/;"	v
g:AutoPairsMultilineClose	old/.vimrc	/^let g:AutoPairsMultilineClose=0$/;"	v
g:AutoPairsShortcutFastWrap	nvim/config/macos_remappings.vim	/^    let g:AutoPairsShortcutFastWrap="Σ"$/;"	v
g:NERDDefaultAlign	nvim/config/conf-plugin.vim	/^  let g:NERDDefaultAlign = 'left'$/;"	v
g:NERDSpaceDelims	nvim/config/conf-plugin.vim	/^  let g:NERDSpaceDelims=1$/;"	v
g:SuperTabDefaultCompletionType	nvim/config/conf-plugin.vim	/^  let g:SuperTabDefaultCompletionType = "<c-n>"$/;"	v
g:WebDevIconsUnicodeDecorateFolderNodeDefaultSymbol	nvim/config/conf-plugin.vim	/^  let g:WebDevIconsUnicodeDecorateFolderNodeDefaultSymbol = ''$/;"	v
g:WebDevIconsUnicodeDecorateFolderNodes	nvim/config/conf-plugin.vim	/^  let g:WebDevIconsUnicodeDecorateFolderNodes = 1$/;"	v
g:ale_fixers	old/.vimrc	/^let g:ale_fixers = {$/;"	v
g:bclose_no_plugin_maps	nvim/config/remappings.vim	/^let g:bclose_no_plugin_maps=1$/;"	v
g:coc_filetypes	nvim/config/coc.vim	/^let g:coc_filetypes = [$/;"	v
g:comfortable_motion_air_drag	nvim/config/conf-plugin.vim	/^  let g:comfortable_motion_air_drag = 1$/;"	v
g:comfortable_motion_friction	nvim/config/conf-plugin.vim	/^  let g:comfortable_motion_friction = 100$/;"	v
g:fzf_layout	nvim/config/conf-plugin.vim	/^  let g:fzf_layout = { 'window': 'call FloatingFZF()' }$/;"	v
g:gutentags_add_default_project_roots	nvim/config/conf-plugin.vim	/^  let g:gutentags_add_default_project_roots = 0 $/;"	v
g:gutentags_cache_dir	nvim/config/conf-plugin.vim	/^  let g:gutentags_cache_dir = expand('~\/.cache\/vim\/ctags\/') $/;"	v
g:gutentags_ctags_extra_args	nvim/config/conf-plugin.vim	/^  let g:gutentags_ctags_extra_args = [ $/;"	v
g:gutentags_generate_on_empty_buffer	nvim/config/conf-plugin.vim	/^  let g:gutentags_generate_on_empty_buffer = 0 $/;"	v
g:gutentags_generate_on_missing	nvim/config/conf-plugin.vim	/^  let g:gutentags_generate_on_missing = 1$/;"	v
g:gutentags_generate_on_new	nvim/config/conf-plugin.vim	/^  let g:gutentags_generate_on_new = 1 $/;"	v
g:gutentags_generate_on_write	nvim/config/conf-plugin.vim	/^  let g:gutentags_generate_on_write = 1$/;"	v
g:gutentags_project_root	nvim/config/conf-plugin.vim	/^  let g:gutentags_project_root = ['package.json', '.git', '.virkspace'] $/;"	v
g:indentLine_char	nvim/config/conf-plugin.vim	/^  let g:indentLine_char = '·'$/;"	v
g:indentLine_enabled	nvim/config/conf-plugin.vim	/^  let g:indentLine_enabled = 1$/;"	v
g:indentLine_first_char	nvim/config/conf-plugin.vim	/^  let g:indentLine_first_char = '·'$/;"	v
g:indentLine_showFirstIndentLevel	nvim/config/conf-plugin.vim	/^  let g:indentLine_showFirstIndentLevel = 1$/;"	v
g:lightline	nvim/config/highlighting.vim	/^let g:lightline = {$/;"	v
g:lightline	old/.vimrc	/^let g:lightline = { $/;"	v
g:lightline#colorscheme#VimSpectre300light#palette	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let g:lightline#colorscheme#VimSpectre300light#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:limelight_conceal_guifg	nvim/config/highlighting.vim	/^let g:limelight_conceal_guifg = '#777777'$/;"	v
g:limelight_conceal_guifg	nvim/config/highlighting.vim	/^let g:limelight_conceal_guifg = 'DarkGray'$/;"	v
g:limelight_conceal_guifg	old/.vimrc	/^let g:limelight_conceal_guifg = '#777777'$/;"	v
g:limelight_conceal_guifg	old/.vimrc	/^let g:limelight_conceal_guifg = 'DarkGray'$/;"	v
g:loaded_netrwPlugin	nvim/config/conf-plugin.vim	/^  let g:loaded_netrwPlugin = 1$/;"	v
g:mundo_right	nvim/config/conf-plugin.vim	/^  let g:mundo_right = 1$/;"	v
g:nvimgdb_config_override	nvim/config/conf-plugin.vim	/^  let g:nvimgdb_config_override = {$/;"	v
g:onedark_termcolors	nvim/config/highlighting.vim	/^let g:onedark_termcolors = 256$/;"	v
g:onedark_termcolors	old/.vimrc	/^let g:onedark_termcolors = 256$/;"	v
g:pandoc#command#latex_engine	nvim/config/conf-plugin.vim	/^  let g:pandoc#command#latex_engine = "pdflatex"$/;"	v
g:pandoc#filetypes#handled	nvim/config/conf-plugin.vim	/^  let g:pandoc#filetypes#handled = ["pandoc", "markdown"]$/;"	v
g:pandoc#filetypes#pandoc_markdown	nvim/config/conf-plugin.vim	/^  let g:pandoc#filetypes#pandoc_markdown = 0$/;"	v
g:python3_host_prog	nvim/init.vim	/^let g:python3_host_prog='\/usr\/bin\/python3'$/;"	v
g:python_highlight_all	nvim/config/coc.vim	/^let g:python_highlight_all = 1$/;"	v
g:python_host_prog	nvim/init.vim	/^let g:python_host_prog='\/usr\/bin\/python2'$/;"	v
g:ranger_map_keys	nvim/config/conf-plugin.vim	/^  let g:ranger_map_keys = 0$/;"	v
g:ranger_replace_netrw	nvim/config/conf-plugin.vim	/^  let g:ranger_replace_netrw = 0$/;"	v
g:startify_custom_footer	nvim/config/conf-plugin.vim	/^    let g:startify_custom_footer = s:center(s:footer)$/;"	v
g:startify_custom_header	nvim/config/conf-plugin.vim	/^    let g:startify_custom_header = s:center(s:header)$/;"	v
g:startify_padding_left	nvim/config/conf-plugin.vim	/^    let g:startify_padding_left = (winwidth(0) \/ 4)$/;"	v
g:tagbar_auto_close	nvim/config/conf-plugin.vim	/^  let g:tagbar_auto_close = 1$/;"	v
g:tagbar_compact	nvim/config/conf-plugin.vim	/^  let g:tagbar_compact = 1$/;"	v
g:tagbar_iconchars	nvim/config/conf-plugin.vim	/^  let g:tagbar_iconchars = ["\\u00a0", "\\u00a0"]$/;"	v
g:tagbar_type_kotlin	nvim/config/conf-plugin.vim	/^  let g:tagbar_type_kotlin = {$/;"	v
g:term_theme	nvim/init.vim	/^let g:term_theme = $TERMTHEME$/;"	v
g:tex_conceal	nvim/config/conf-plugin.vim	/^  let g:tex_conceal = ""$/;"	v
g:tex_flavor	nvim/config/conf-plugin.vim	/^  let g:tex_flavor = 'latex'$/;"	v
g:two_firewatch_italics	nvim/config/highlighting.vim	/^let g:two_firewatch_italics=1$/;"	v
g:vimspectrItalicComment	nvim/config/highlighting.vim	/^let g:vimspectrItalicComment = 'on'$/;"	v
g:vimtex_indent_enabled	nvim/config/conf-plugin.vim	/^  let g:vimtex_indent_enabled = 0$/;"	v
g:vimtex_toc_width	nvim/config/conf-plugin.vim	/^  let g:vimtex_toc_width = 25$/;"	v
g:vimtex_view_general_options	nvim/config/conf-plugin.vim	/^  let g:vimtex_view_general_options = '--unique @pdf\\#src:@tex:@line:@col'$/;"	v
g:vimtex_view_general_options_latexmk	nvim/config/conf-plugin.vim	/^  let g:vimtex_view_general_options_latexmk = '--unique'$/;"	v
g:vimtex_view_general_viewer	nvim/config/conf-plugin.vim	/^  let g:vimtex_view_general_viewer = 'firefox'$/;"	v
g:virk_tags_enable	nvim/config/conf-plugin.vim	/^  let g:virk_tags_enable = 0$/;"	v
g:vista#renderer#icons	nvim/config/conf-plugin.vim	/^  let g:vista#renderer#icons = {$/;"	v
g:vista_default_executive	nvim/config/conf-plugin.vim	/^  let g:vista_default_executive = 'coc'$/;"	v
g:vista_executive_for	nvim/config/conf-plugin.vim	/^  let g:vista_executive_for = {$/;"	v
g:vista_icon_indent	nvim/config/conf-plugin.vim	/^  let g:vista_icon_indent = ["╰─▸ ", "├─▸ "]$/;"	v
g:yats_host_keyword	nvim/config/conf-plugin.vim	/^  let g:yats_host_keyword = 1$/;"	v
g:yats_host_keyword	old/.vimrc	/^let g:yats_host_keyword = 1$/;"	v
git.addGBlameToBufferVar	nvim/coc-settings.json	/^  "git.addGBlameToBufferVar": true,$/;"	b
git.addGBlameToVirtualText	nvim/coc-settings.json	/^  "git.addGBlameToVirtualText": true,$/;"	b
git.addedSign.hlGroup	nvim/coc-settings.json	/^  "git.addedSign.hlGroup": "GitGutterAdd",$/;"	s
git.changeRemovedSign.hlGroup	nvim/coc-settings.json	/^  "git.changeRemovedSign.hlGroup": "GitGutterChangeDelete",$/;"	s
git.changedSign.hlGroup	nvim/coc-settings.json	/^  "git.changedSign.hlGroup": "GitGutterChange",$/;"	s
git.enableGutters	nvim/coc-settings.json	/^  "git.enableGutters": true,$/;"	b
git.removedSign.hlGroup	nvim/coc-settings.json	/^  "git.removedSign.hlGroup": "GitGutterDelete",$/;"	s
git.topRemovedSign.hlGroup	nvim/coc-settings.json	/^  "git.topRemovedSign.hlGroup": "GitGutterDelete",$/;"	s
git.virtualTextPrefix	nvim/coc-settings.json	/^  "git.virtualTextPrefix": "    | ",$/;"	s
gocodeCompletionEnabled	nvim/coc-settings.json	/^        "gocodeCompletionEnabled": true,$/;"	b	object:languageserver.golang.initializationOptions
golang	nvim/coc-settings.json	/^    "golang": {$/;"	o	object:languageserver
groovy	nvim/coc-settings.json	/^    "groovy": {$/;"	o	object:languageserver
initializationOptions	nvim/coc-settings.json	/^      "initializationOptions": {$/;"	o	object:languageserver.ccls
initializationOptions	nvim/coc-settings.json	/^      "initializationOptions": {$/;"	o	object:languageserver.golang
inst_if_exists	old/inst-nvim.sh	/^function inst_if_exists() {$/;"	f
kotlin	nvim/coc-settings.json	/^    "kotlin": {$/;"	o	object:languageserver
languageserver	nvim/coc-settings.json	/^  "languageserver": {$/;"	o
lightline#colorscheme#background	nvim/config/highlighting.vim	/^let lightline#colorscheme#background = 'light'$/;"	v
line	nvim/coc-settings.json	/^          "line": 1,$/;"	n	object:diagnostic-languageserver.linters.shellcheck.formatPattern.1
lintTool	nvim/coc-settings.json	/^        "lintTool": "golint"$/;"	s	object:languageserver.golang.initializationOptions
mapleader	nvim/config/remappings.vim	/^let mapleader="\\<Space>"$/;"	v
message	nvim/coc-settings.json	/^          "message": 4,$/;"	n	object:diagnostic-languageserver.linters.shellcheck.formatPattern.1
note	nvim/coc-settings.json	/^        "note": "info"$/;"	s	object:diagnostic-languageserver.linters.shellcheck.securities
offsetColumn	nvim/coc-settings.json	/^      "offsetColumn": 0,$/;"	n	object:diagnostic-languageserver.linters.shellcheck
offsetLine	nvim/coc-settings.json	/^      "offsetLine": 0,$/;"	n	object:diagnostic-languageserver.linters.shellcheck
python.linting.enabled	nvim/coc-settings.json	/^  "python.linting.enabled": true,$/;"	b
rootPatterns	nvim/coc-settings.json	/^      "rootPatterns": [$/;"	a	object:languageserver.ccls
s:BuildTagName	nvim/ftplugin/vue.vim	/^function s:BuildTagName( )$/;"	f
s:Callback	nvim/ftplugin/vue.vim	/^function s:Callback( xml_tag, isHtml )$/;"	f
s:ClearJumpMarks	nvim/ftplugin/vue.vim	/^function s:ClearJumpMarks( )$/;"	f
s:CocFormat	nvim/config/remappings.vim	/^function! s:CocFormat(range, line1, line2) abort$/;"	f
s:DecreaseCommentLevel	nvim/ftplugin/vue.vim	/^function s:DecreaseCommentLevel( )$/;"	f
s:DeleteTag	nvim/ftplugin/vue.vim	/^function s:DeleteTag( )$/;"	f
s:EditFromJump	nvim/ftplugin/vue.vim	/^function s:EditFromJump( )$/;"	f
s:GetCurrentTag	nvim/ftplugin/vue.vim	/^	function s:GetCurrentTag()$/;"	f
s:IncreaseCommentLevel	nvim/ftplugin/vue.vim	/^function s:IncreaseCommentLevel( )$/;"	f
s:InitEditFromJump	nvim/ftplugin/vue.vim	/^function s:InitEditFromJump( )$/;"	f
s:InsertGt	nvim/ftplugin/vue.vim	/^function s:InsertGt( )$/;"	f
s:IsParsableTag	nvim/ftplugin/vue.vim	/^function s:IsParsableTag( tag )$/;"	f
s:MisMatchedTag	nvim/ftplugin/vue.vim	/^function s:MisMatchedTag( id, tag )$/;"	f
s:MoveCursor	nvim/ftplugin/vue.vim	/^	function s:MoveCursor()$/;"	f
s:NewFileXML	nvim/ftplugin/vue.vim	/^function s:NewFileXML( )$/;"	f
s:ParseTag	nvim/ftplugin/vue.vim	/^function s:ParseTag( )$/;"	f
s:SetSignTheme	nvim/config/highlighting.vim	/^func! s:SetSignTheme(bg)$/;"	f
s:Strlen	nvim/ftplugin/vue.vim	/^function s:Strlen(text)$/;"	f
s:TagMatch1	nvim/ftplugin/vue.vim	/^function s:TagMatch1()$/;"	f
s:TagMatch2	nvim/ftplugin/vue.vim	/^function s:TagMatch2(tag,endtag)$/;"	f
s:VisualTag	nvim/ftplugin/vue.vim	/^function s:VisualTag( )$/;"	f
s:WrapTag	nvim/ftplugin/vue.vim	/^function s:WrapTag(text)$/;"	f
s:background	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:background     = '#f0fdf0'$/;"	v
s:blue	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:blue         = '#4286c9'$/;"	v
s:center	nvim/config/conf-plugin.vim	/^  function! s:center(lines) abort$/;"	f
s:check_back_space	nvim/config/coc.vim	/^function! s:check_back_space() abort$/;"	f
s:error	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:error          = '#ffafdf'$/;"	v
s:footer	nvim/config/conf-plugin.vim	/^  let s:footer = [$/;"	v
s:foreground	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:foreground     = '#7d5e7d'$/;"	v
s:green	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:green        = '#699e34'$/;"	v
s:header	nvim/config/conf-plugin.vim	/^  let s:header = [$/;"	v
s:inactive_dark	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:inactive_dark  = '#ded1e0'$/;"	v
s:inactive_light	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:inactive_light = '#d8c3db'$/;"	v
s:l	.virkspace/session.vim	/^let s:l = 24 - ((23 * winheight(0) + 29) \/ 59)$/;"	v
s:lightline_theme	nvim/config/highlighting.vim	/^	let s:lightline_theme = "VimSpectre300light"$/;"	v
s:lightline_theme	nvim/config/highlighting.vim	/^	let s:lightline_theme = "twofirewatch"$/;"	v
s:magenta	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:magenta      = '#7d5e7d'$/;"	v
s:openNerdTreeIfNotAlreadyOpen	nvim/config/conf-plugin.vim	/^  function! s:openNerdTreeIfNotAlreadyOpen()$/;"	f
s:p	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:p.inactive.left   = [ [ s:foreground, s:inactive_light ], [ s:foreground, s:inactive_light/;"	v
s:p	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:p.inactive.middle = [ [ s:inactive_dark,s:inactive_dark], ]$/;"	v
s:p	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:p.inactive.right  = s:p.inactive.left$/;"	v
s:p	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:p.insert.left     = [ [ s:background, s:blue ], [ s:statusline_active_fg, s:purple ], [ s:/;"	v
s:p	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:p.insert.right    = s:p.insert.left$/;"	v
s:p	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:p.normal.error    = [ [ s:background, s:error ] ]$/;"	v
s:p	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:p.normal.left     = [ [ s:background, s:foreground ], [ s:statusline_active_fg, s:purple ]/;"	v
s:p	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:p.normal.middle   = [ [ s:foreground, s:foreground ]]$/;"	v
s:p	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:p.normal.right    = s:p.normal.left$/;"	v
s:p	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:p.normal.warning  = [ [ s:background, s:green ] ]$/;"	v
s:p	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:p.replace.left    = [ [ s:background, s:pink ], [s:statusline_active_fg, s:purple ], [ s:s/;"	v
s:p	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:p.replace.right   = s:p.replace.left$/;"	v
s:p	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:p.tabline.left    = [ [s:tabline_inactive_fg, s:tabline_inactive_bg ]]$/;"	v
s:p	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:p.tabline.middle  = [ [s:tabline_bg, s:tabline_bg]]$/;"	v
s:p	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:p.tabline.right   = s:p.normal.right$/;"	v
s:p	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:p.tabline.tabsel  = [ [s:tabline_active_fg, s:tabline_active_bg ] ]$/;"	v
s:p	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:p.visual.left     = [ [ s:background, s:purple ], [s:statusline_active_fg, s:purple ], [ s/;"	v
s:p	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:p.visual.right    = s:p.visual.left$/;"	v
s:pink	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:pink         = '#c26e84'$/;"	v
s:purple	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:purple       = '#8959a8'$/;"	v
s:purple_light	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:purple_light = '#b86ab4'$/;"	v
s:so_save	.virkspace/session.vim	/^let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0$/;"	v
s:statusline_active_bg	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:statusline_active_bg = s:magenta$/;"	v
s:statusline_active_fg	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:statusline_active_fg = s:window$/;"	v
s:sx	.virkspace/session.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:tabline_active_bg	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:tabline_active_bg   = s:window$/;"	v
s:tabline_active_fg	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:tabline_active_fg   = s:foreground$/;"	v
s:tabline_bg	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:tabline_bg          = s:magenta$/;"	v
s:tabline_inactive_bg	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:tabline_inactive_bg = s:purple_light$/;"	v
s:tabline_inactive_fg	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:tabline_inactive_fg = s:background$/;"	v
s:window	nvim/autoload/lightline/colorscheme/VimSpectre300light.vim	/^let s:window         = '#efefef'$/;"	v
s:wipebuf	.virkspace/session.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
save	nvim/addit-lang-servers/kotlin-language-server	/^save () {$/;"	f
securities	nvim/coc-settings.json	/^      "securities": {$/;"	o	object:diagnostic-languageserver.linters.shellcheck
security	nvim/coc-settings.json	/^          "security": 3$/;"	n	object:diagnostic-languageserver.linters.shellcheck.formatPattern.1
sh	nvim/coc-settings.json	/^    "sh": "shellcheck",$/;"	s	object:diagnostic-languageserver.filetypes
shellcheck	nvim/coc-settings.json	/^    "shellcheck": {$/;"	o	object:diagnostic-languageserver.linters
sourceName	nvim/coc-settings.json	/^      "sourceName": "shellcheck",$/;"	s	object:diagnostic-languageserver.linters.shellcheck
suggest.triggerAfterInsertEnter	nvim/coc-settings.json	/^  "suggest.triggerAfterInsertEnter": false,$/;"	b
tslint.autoFixOnSave	nvim/coc-settings.json	/^  "tslint.autoFixOnSave": true,$/;"	b
tslint.jsEnable	nvim/coc-settings.json	/^  "tslint.jsEnable": true,$/;"	b
tslint.packageManager	nvim/coc-settings.json	/^  "tslint.packageManager": "npm",$/;"	s
vim	nvim/coc-settings.json	/^    "vim": "vint"$/;"	s	object:diagnostic-languageserver.filetypes
vimrc	nvim/config/coc.vim	/^augroup vimrc-coc$/;"	a
vimrc_feature_terminal	nvim/config/terminal.vim	/^augroup vimrc_feature_terminal$/;"	a
vimrc_language_other	nvim/config/files.vim	/^augroup vimrc_language_other$/;"	a
vimrc_language_web	nvim/config/files.vim	/^augroup vimrc_language_web$/;"	a
vimrc_nerdtree	nvim/config/files.vim	/^augroup vimrc_nerdtree$/;"	a
warn	nvim/addit-lang-servers/kotlin-language-server	/^warn () {$/;"	f
warning	nvim/coc-settings.json	/^        "warning": "warning",$/;"	s	object:diagnostic-languageserver.linters.shellcheck.securities
xml	nvim/ftplugin/vue.vim	/^augroup xml$/;"	a
